<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ConfigCommandDesc" xml:space="preserve">
    <value>Gets or sets NuGet config values.</value>
  </data>
  <data name="ConfigCommandExamples" xml:space="preserve">
    <value>nuget config -Set HTTP_PROXY=http://127.0.0.1 -Set HTTP_PROXY.USER=domain\user
nuget.config HTTP_PROXY</value>
  </data>
  <data name="ConfigCommandSetDesc" xml:space="preserve">
    <value>One on more key-value pairs to be set in config.</value>
  </data>
  <data name="ConfigCommandSummary" xml:space="preserve">
    <value>-Set name=value</value>
  </data>
  <data name="DeleteCommandDescription" xml:space="preserve">
    <value>Deletes a package from the server.</value>
  </data>
  <data name="DeleteCommandNoPromptDescription" xml:space="preserve">
    <value>Do not prompt when deleting.</value>
  </data>
  <data name="DeleteCommandSourceDescription" xml:space="preserve">
    <value>Specifies the server URL.</value>
  </data>
  <data name="DeleteCommandUsageDescription" xml:space="preserve">
    <value>Specify the Id and version of the package to delete from the server.</value>
  </data>
  <data name="DeleteCommandUsageExamples" xml:space="preserve">
    <value>nuget delete MyPackage 1.0
    
nuget delete MyPackage 1.0 -NoPrompt</value>
  </data>
  <data name="DeleteCommandUsageSummary" xml:space="preserve">
    <value>&lt;package Id&gt; &lt;package version&gt; [API Key] [options]</value>
  </data>
  <data name="HelpCommandAll" xml:space="preserve">
    <value>Print detailed help for all available commands.</value>
  </data>
  <data name="HelpCommandDescription" xml:space="preserve">
    <value>Displays general help information and help information about other commands.</value>
  </data>
  <data name="HelpCommandMarkdown" xml:space="preserve">
    <value>Print detailed all help in markdown format.</value>
  </data>
  <data name="HelpCommandUsageDescription" xml:space="preserve">
    <value>Pass a command name to display help information for that command.</value>
  </data>
  <data name="HelpCommandUsageExamples" xml:space="preserve">
    <value>nuget help

nuget help push

nuget ?

nuget push -?</value>
  </data>
  <data name="HelpCommandUsageSummary" xml:space="preserve">
    <value>[command]</value>
  </data>
  <data name="InstallCommandDescription" xml:space="preserve">
    <value>Installs a package using the specified sources. If no sources are specified, all sources defined in %AppData%\NuGet\NuGet.config are used.  If NuGet.config specifies no sources, uses the default NuGet feed.</value>
  </data>
  <data name="InstallCommandExcludeVersionDescription" xml:space="preserve">
    <value>If set, the destination folder will contain only the package name, not the version number</value>
  </data>
  <data name="InstallCommandNoCache" xml:space="preserve">
    <value>Disable looking up packages from local machine cache.</value>
  </data>
  <data name="InstallCommandOutputDirDescription" xml:space="preserve">
    <value>Specifies the directory in which packages will be installed. If none specified, uses the current directory.</value>
  </data>
  <data name="InstallCommandPrerelease" xml:space="preserve">
    <value>Allows prerelease packages to be installed. This flag is not required when restoring packages by installing from packages.config.</value>
  </data>
  <data name="InstallCommandSourceDescription" xml:space="preserve">
    <value>A list of packages sources to use for the install.</value>
  </data>
  <data name="InstallCommandUsageDescription" xml:space="preserve">
    <value>Specify the id and optionally the version of the package to install. If a path to a packages.config file is used instead of an id, all the packages it contains are installed.</value>
  </data>
  <data name="InstallCommandUsageExamples" xml:space="preserve">
    <value>nuget install elmah

nuget install packages.config

nuget install ninject -o c:\foo</value>
  </data>
  <data name="InstallCommandUsageSummary" xml:space="preserve">
    <value>packageId|pathToPackagesConfig [options]</value>
  </data>
  <data name="InstallCommandVersionDescription" xml:space="preserve">
    <value>The version of the package to install.</value>
  </data>
  <data name="ListCommandAllVersionsDescription" xml:space="preserve">
    <value>List all versions of a package. By default, only the latest package version is displayed.</value>
  </data>
  <data name="ListCommandDescription" xml:space="preserve">
    <value>Displays a list of packages from a given source. If no sources are specified, all sources defined in %AppData%\NuGet\NuGet.config are used. If NuGet.config specifies no sources, uses the default NuGet feed.</value>
  </data>
  <data name="ListCommandPrerelease" xml:space="preserve">
    <value>Allow prerelease packages to be shown.</value>
  </data>
  <data name="ListCommandSourceDescription" xml:space="preserve">
    <value>A list of packages sources to search.</value>
  </data>
  <data name="ListCommandUsageDescription" xml:space="preserve">
    <value>Specify optional search terms.</value>
  </data>
  <data name="ListCommandUsageExamples" xml:space="preserve">
    <value>nuget list

nuget list -verbose -allversions</value>
  </data>
  <data name="ListCommandUsageSummary" xml:space="preserve">
    <value>[search terms] [options]</value>
  </data>
  <data name="ListCommandVerboseListDescription" xml:space="preserve">
    <value>Displays a detailed list of information for each package.</value>
  </data>
  <data name="Option_NonInteractive" xml:space="preserve">
    <value>Do not prompt for user input or confirmations.</value>
  </data>
  <data name="Option_Verbosity" xml:space="preserve">
    <value>Display this amount of details in the output: normal, quiet, detailed.</value>
  </data>
  <data name="PackageCommandBasePathDescription" xml:space="preserve">
    <value>The base path of the files defined in the nuspec file.</value>
  </data>
  <data name="PackageCommandBuildDescription" xml:space="preserve">
    <value>Determines if the project should be built before building the package.</value>
  </data>
  <data name="PackageCommandDescription" xml:space="preserve">
    <value>Creates a NuGet package based on the specified nuspec or project file.</value>
  </data>
  <data name="PackageCommandExcludeDescription" xml:space="preserve">
    <value>Specifies one or more wildcard patterns to exclude when creating a package.</value>
  </data>
  <data name="PackageCommandExcludeEmptyDirectories" xml:space="preserve">
    <value>Prevent inclusion of empty directories when building the package.</value>
  </data>
  <data name="PackageCommandNoDefaultExcludes" xml:space="preserve">
    <value>Prevent default exclusion of NuGet package files and files and folders starting with a dot e.g. .svn.</value>
  </data>
  <data name="PackageCommandNoRunAnalysis" xml:space="preserve">
    <value>Specify if the command should not run package analysis after building the package.</value>
  </data>
  <data name="PackageCommandOutputDirDescription" xml:space="preserve">
    <value>Specifies the directory for the created NuGet package file. If not specified, uses the current directory.</value>
  </data>
  <data name="PackageCommandPropertiesDescription" xml:space="preserve">
    <value>Provides the ability to specify a semicolon ";" delimited list of properties when creating a package.</value>
  </data>
  <data name="PackageCommandSymbolsDescription" xml:space="preserve">
    <value>Determines if a package containing sources and symbols should be created. When specified with a nuspec, creates a regular NuGet package file and the corresponding symbols package.</value>
  </data>
  <data name="PackageCommandToolDescription" xml:space="preserve">
    <value>Determines if the output files of the project should be in the tool folder. </value>
  </data>
  <data name="PackageCommandUsageDescription" xml:space="preserve">
    <value>Specify the location of the nuspec or project file to create a package.</value>
  </data>
  <data name="PackageCommandUsageSummary" xml:space="preserve">
    <value>&lt;nuspec | project&gt; [options]</value>
  </data>
  <data name="PackageCommandVerboseDescription" xml:space="preserve">
    <value>Shows verbose output for package building.</value>
  </data>
  <data name="PackageCommandVersionDescription" xml:space="preserve">
    <value>Overrides the version number from the nuspec file.</value>
  </data>
  <data name="PackCommandUsageExamples" xml:space="preserve">
    <value>nuget pack

nuget pack foo.nuspec

nuget pack foo.csproj

nuget pack foo.csproj -Build -Symbols -Properties Configuration=Release

nuget pack foo.nuspec -Version 2.1.0</value>
  </data>
  <data name="PushCommandDescription" xml:space="preserve">
    <value>Pushes a package to the server and optionally publishes it.</value>
  </data>
  <data name="PushCommandSourceDescription" xml:space="preserve">
    <value>Specifies the server URL. If not specified, nuget.org is used unless DefaultPushSource config value is set in the NuGet config file.</value>
  </data>
  <data name="PushCommandTimeoutDescription" xml:space="preserve">
    <value>Specifies the timeout for pushing to a server in seconds. Defaults to 300 seconds (5 minutes).</value>
  </data>
  <data name="PushCommandUsageDescription" xml:space="preserve">
    <value>Specify the path to the package and your API key to push the package to the server.</value>
  </data>
  <data name="PushCommandUsageExamples" xml:space="preserve">
    <value>nuget push foo.nupkg 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a

nuget push foo.nupkg 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a -s http://customsource/

nuget push foo.nupkg

nuget push foo.nupkg.symbols

nuget push foo.nupkg -Timeout 360</value>
  </data>
  <data name="PushCommandUsageSummary" xml:space="preserve">
    <value>&lt;package path&gt; [API key] [options]</value>
  </data>
  <data name="SetApiKeyCommandDescription" xml:space="preserve">
    <value>Saves an API key for a given server URL. When no URL is provided API key is saved for the NuGet gallery.</value>
  </data>
  <data name="SetApiKeyCommandSourceDescription" xml:space="preserve">
    <value>Server URL where the API key is valid.</value>
  </data>
  <data name="SetApiKeyCommandUsageDescription" xml:space="preserve">
    <value>Specify the API key to save and an optional URL to the server that provided the API key.</value>
  </data>
  <data name="SetApiKeyCommandUsageExamples" xml:space="preserve">
    <value>nuget setapikey 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a

nuget setapikey 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a -Source http://example.com/nugetfeed</value>
  </data>
  <data name="SetApiKeyCommandUsageSummary" xml:space="preserve">
    <value>&lt;API key&gt; [options]</value>
  </data>
  <data name="SourcesCommandDescription" xml:space="preserve">
    <value>Provides the ability to manage list of sources located in  %AppData%\NuGet\NuGet.config</value>
  </data>
  <data name="SourcesCommandNameDescription" xml:space="preserve">
    <value>Name of the source.</value>
  </data>
  <data name="SourcesCommandPasswordDescription" xml:space="preserve">
    <value>Password to be used when connecting to an authenticated source.</value>
  </data>
  <data name="SourcesCommandSourceDescription" xml:space="preserve">
    <value>Path to the package(s) source.</value>
  </data>
  <data name="SourcesCommandUsageSummary" xml:space="preserve">
    <value>&lt;List|Add|Remove|Enable|Disable|Update&gt; -Name [name] -Source [source]</value>
  </data>
  <data name="SourcesCommandUserNameDescription" xml:space="preserve">
    <value>UserName to be used when connecting to an authenticated source.</value>
  </data>
  <data name="SpecCommandAssemblyPathDescription" xml:space="preserve">
    <value>Assembly to use for metadata.</value>
  </data>
  <data name="SpecCommandDescription" xml:space="preserve">
    <value>Generates a nuspec for a new package. If this command is run in the same folder as a project file (.csproj, .vbproj, .fsproj), it will create a tokenized nuspec file.</value>
  </data>
  <data name="SpecCommandForceDescription" xml:space="preserve">
    <value>Overwrite nuspec file if it exists.</value>
  </data>
  <data name="SpecCommandUsageExamples" xml:space="preserve">
    <value>nuget spec

nuget spec MyPackage

nuget spec -a MyAssembly.dll</value>
  </data>
  <data name="SpecCommandUsageSummary" xml:space="preserve">
    <value>[package id]</value>
  </data>
  <data name="UpdateCommandDescription" xml:space="preserve">
    <value>Update packages to latest available versions. This command also updates NuGet.exe itself.</value>
  </data>
  <data name="UpdateCommandIdDescription" xml:space="preserve">
    <value>Package ids to update.</value>
  </data>
  <data name="UpdateCommandPrerelease" xml:space="preserve">
    <value>Allows updating to prerelease versions. This flag is not required when updating prerelease packages that are already installed.</value>
  </data>
  <data name="UpdateCommandRepositoryPathDescription" xml:space="preserve">
    <value>Path to the local packages folder (location where packages are installed).</value>
  </data>
  <data name="UpdateCommandSafeDescription" xml:space="preserve">
    <value>Looks for updates with the highest version available within the same major and minor version as the installed package.</value>
  </data>
  <data name="UpdateCommandSelfDescription" xml:space="preserve">
    <value>Update the running NuGet.exe to the newest version available from the server.</value>
  </data>
  <data name="UpdateCommandSourceDescription" xml:space="preserve">
    <value>A list of package sources to search for updates.</value>
  </data>
  <data name="UpdateCommandUsageExamples" xml:space="preserve">
    <value>nuget update
    
nuget update -Safe

nuget update -Self</value>
  </data>
  <data name="UpdateCommandVerboseDescription" xml:space="preserve">
    <value>Show verbose output while updating.</value>
  </data>
  <data name="CommandApiKey" xml:space="preserve">
    <value>The API key for the server.</value>
  </data>
  <data name="DefaultConfigDescription" xml:space="preserve">
    <value>NuGet's default configuration is obtained by loading %AppData%\NuGet\NuGet.config, then loading any nuget.config or .nuget\nuget.config starting from root of drive and ending in current directory.</value>
  </data>
  <data name="InstallCommandRequireConsent" xml:space="preserve">
    <value>Checks if package restore consent is granted before installing a package.</value>
  </data>
  <data name="MergeCommandDescription" xml:space="preserve">
    <value>Merges two NuGet Packages in to a single package file, combining files but leaving metadata unchanged.</value>
  </data>
  <data name="MergeCommandUsageDescription" xml:space="preserve">
    <value>Specify the two package files to merge and the name of the output file to create.</value>
  </data>
  <data name="MergeCommandUsageExamples" xml:space="preserve">
    <value>nuget merge MyLibrary.WinRT.1.0.nupkg MyLibrary.NetFx45.1.0.nupkg MyLibrary.1.0.nupkg</value>
  </data>
  <data name="MergeCommandUsageSummary" xml:space="preserve">
    <value>&lt;package file 1&gt; &lt;package file 2&gt; &lt;output package file&gt; [options]</value>
  </data>
</root>